version: 2.1

jobs:
  build_and_test:
    docker:
      - image: cimg/base:stable  # 기본 Linux 환경 이미지
    steps:
      - checkout  # Git 저장소에서 코드 가져오기
      - setup_remote_docker:
          docker_layer_caching: true

      # Git에서 인증서 파일 가져오기 (certificates/ca.crt)
      - run:
          name: Install Harbor SSL Certificate from Git
          command: |
            mkdir -p /usr/local/share/ca-certificates/extra
            cp ./certificates/ca.crt /usr/local/share/ca-certificates/extra/harbor.crt
            update-ca-certificates

      # 백엔드 각 서비스의 .env 파일을 생성 (포트 번호만 다르게 설정)
      - run:
          name: Create Backend .env files for services
          command: |
            for service in auth-service search-service lyrics-service translation-service playlist-service; do
              case "$service" in
                auth-service)
                  port=3001
                  ;;
                search-service)
                  port=3002
                  ;;
                lyrics-service)
                  port=3003
                  ;;
                translation-service)
                  port=3004
                  ;;
                playlist-service)
                  port=3005
                  ;;
              esac
              echo "Creating .env for $service on port $port"
              echo "PORT=$port" > Backend/Image/$service/.env
              echo "SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}" >> Backend/Image/$service/.env
              echo "SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}" >> Backend/Image/$service/.env
              echo "YOUTUBE_API_KEYS=${YOUTUBE_API_KEYS}" >> Backend/Image/$service/.env
              echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> Backend/Image/$service/.env
              echo "FRONTEND_URL=${FRONTEND_URL}" >> Backend/Image/$service/.env
              echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> Backend/Image/$service/.env
              echo "JWT_SECRET=${JWT_SECRET}" >> Backend/Image/$service/.env
              echo "MONGO_URI=${MONGO_URI}" >> Backend/Image/$service/.env
              echo "MUSIXMATCH_API_KEY=${MUSIXMATCH_API_KEY}" >> Backend/Image/$service/.env
              echo "MUSIXMATCH_API_HOST=${MUSIXMATCH_API_HOST}" >> Backend/Image/$service/.env
              echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> Backend/Image/$service/.env
              echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> Backend/Image/$service/.env
              echo "AWS_REGION=${AWS_REGION}" >> Backend/Image/$service/.env
              echo "INFERENCE_PROFILE_ARN=${INFERENCE_PROFILE_ARN}" >> Backend/Image/$service/.env
              echo "LRCLIB_API_BASE=${LRCLIB_API_BASE}" >> Backend/Image/$service/.env
            done

      # 프론트엔드 .env 파일 생성 (필요한 내용만 설정)
      - run:
          name: Create Frontend .env file
          command: |
            echo "VITE_BACKEND_URL=${VITE_BACKEND_URL}" > Frontend/bravo-front/.env

      # Docker Compose로 이미지 빌드
      - run:
          name: Build Docker Images
          command: docker-compose -f docker-compose.yaml build

      # Docker 이미지 태깅
      - run:
          name: Tag Docker Images for Harbor
          command: |
            docker tag itda-auth:1.0 $HARBOR_URL/$HARBOR_PROJECT/itda-auth:1.0
            docker tag itda-search:1.0 $HARBOR_URL/$HARBOR_PROJECT/itda-search:1.0
            docker tag itda-lyrics:1.0 $HARBOR_URL/$HARBOR_PROJECT/itda-lyrics:1.0

      # Harbor에 로그인
      - run:
          name: Log in to Harbor
          command: echo "$HARBOR_PASSWORD" | docker login $HARBOR_URL --username "$HARBOR_USERNAME" --password-stdin

      # Harbor로 Docker 이미지 푸시
      - run:
          name: Push Docker Images to Harbor
          command: |
            docker push $HARBOR_URL/$HARBOR_PROJECT/itda-auth:1.0
            docker push $HARBOR_URL/$HARBOR_PROJECT/itda-search:1.0
            docker push $HARBOR_URL/$HARBOR_PROJECT/itda-lyrics:1.0

      # 프론트엔드와 백엔드 서비스 실행
      - run:
          name: Start Services
          command: |
            docker-compose -f docker-compose.yaml up -d

      # 서비스 종료
      - run:
          name: Stop Services
          command: docker-compose -f docker-compose.yaml down

workflows:
  version: 2
  build_test_workflow:
    jobs:
      - build_and_test

